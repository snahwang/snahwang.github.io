{"pages":[],"posts":[{"title":"google spreadsheet query검색 파이썬으로 구현하기","text":"파이썬으로 구글 스프레드시트 조회 #1구글 스프레드시트의 특정한 값을 조회해야하는 일이 생겼다.구글에서 제공하는 OpenAPI가 많지만,API key 생성 없이 url 호출만으로 특정한 값을 뽑아내는 함수를 구현하고자 했다. 검색해보니 query를 이용하여 마치 데이터베이스처럼 스프레드시트를 사용할 수 있는 기능이 있었다.(구글공식: https://developers.google.com/chart/interactive/docs/querylanguage) 이걸 활용해서 어딘가의 서비스에서 문서를 조회 하려면,구글스프레드시트의 공개 설정이 아래와 같이 되어있어야한다. 웹에 공개 링크가 있는 인터넷상의 모든 사용자가 열 수 있음 구글 시트는 보통 아래같은 url 로 접근할 수 있다.(예시문서)https://docs.google.com/spreadsheets/d/19DUH2vK5a196ismKDy4Y6u6u7gVMYOE-ExzAF0Caztg/edit#gid=1386834576 여기서,https://docs.google.com/spreadsheets/d/19DUH2vK5a196ismKDy4Y6u6u7gVMYOE-ExzAF0Caztg/는 스프레드시트의 url 이다. spreadsheet의 url 뒤에 /gviz/tq?tq=쿼리스트링 을 붙이면 쿼리로 검색한 것만 조회할 수 있는데쿼리스트링은 url 인코딩 된 형태여야한다. 만약 예시로 든 스프레드시트에서 할일 목록 중 완료한걸 뽑고 싶다면,“select B where A=true” 라는 쿼리로 조회할 수 있고, url 호출할 땐 아래처럼 하면 된다.“https://docs.google.com/spreadsheets/d/19DUH2vK5a196ismKDy4Y6u6u7gVMYOE-ExzAF0Caztg/gviz/tq?tq=select+B+where+A%3Dtrue&quot; 나는 최종적으로 할일 목록 중, 날짜가 오늘보다 작거나 같은데 완료하지 못한 일들의 목록을 추출했다. 파이썬으로 구현한 내용은 다음 포스트에 작성하겠다.","link":"/2020/12/14/google-spreadsheet-query%EA%B2%80%EC%83%89-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/"},{"title":"google spreadsheet query검색 파이썬으로 구현하기2","text":"파이썬으로 구글 스프레드시트 조회 #2requests 모듈을 임포트해서 get 호출해서 응답값을 json으로 읽어서 처리하도록 했는데,사실 이 쿼리를 이용한 url 호출할 경우 정상적인 json 형태의 데이터가 리턴되는 것은 아니다.앞뒤로 json 포맷에 맞지않는 문자를 제거해주어야 json 으로 파싱이 가능하다.(리턴되는 값들 중 특정한 값만 또 뽑아낼 때 편하기 위해서 json 파싱 후 처리하도록 했다.) 지저분하긴 하지만 불필요 문자 제거는 replace를 이용했고 작성한 코드는 아래와 같다. 1234567891011121314151617181920212223242526from urllib import parseimport requestsimport jsonurl = 'https://docs.google.com/spreadsheets/d/19DUH2vK5a196ismKDy4Y6u6u7gVMYOE-ExzAF0Caztg/gviz/tq?tq='tq = 'select B where A=false and C is not null and C&lt;=toDate(now())' sheetid = '&amp;gid=1386834576'#url인코딩을 위한 함수호출query = parse.quote_plus(tq) response = requests.get(url+query+sheetid)#json데이터를 로드하기 위해 불필요한 문자열을 replace 했다. 이런식의 문자열 하드코딩 replace는 좋지않지만..response_text = response.text.replace('/*O_o*/\\ngoogle.visualization.Query.setResponse(', '').replace(');','') response_json = json.loads(response_text)rowlist = response_json['table']['rows']todo = []case = {}for row in rowlist: d = {} d['todo'] = row['c'][0]['v'] todo.append(d)case['list'] = todoprint (todo) 사실 여기서 끝이 아니고,난 이런 작업을 대신해 주는 서버를 python + flask 를 이용해서 만들어 놨고,정리한 todo 를 json 형태로 리턴해주는 서비스를 AWS에 띄워놨다.예 http://ec2-3-34-124-86.ap-northeast-2.compute.amazonaws.com/todo/sunhee","link":"/2020/12/15/google-spreadsheet-query%EA%B2%80%EC%83%89-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B02/"},{"title":"오늘만들다","text":"블로그를 만들다분명 예전에 내가 만든 시스템인데 대체 어떻게 만들었더라? 싶은 것들도 많고 잘 정리해뒀어도 퇴사하면서 PC를 포맷하면 나에게 남는 게 없으니 따로 정리할 필요성을 느끼고 있었지만.. 미루고 미루다가 이제서야 블로그를 만들었다 이걸 시작으로 하나씩 공부한 것들도 정리하고, 업무 진행한 것들도 (나름 보안은 준수하면서) 정리해야겠다. 이왕만든 거 잘 써봐야지","link":"/2020/11/29/%EC%98%A4%EB%8A%98%EB%A7%8C%EB%93%A4%EB%8B%A4/"}],"tags":[{"name":"python","slug":"python","link":"/tags/python/"},{"name":"google spreadsheet","slug":"google-spreadsheet","link":"/tags/google-spreadsheet/"}],"categories":[]}